import { useState, useEffect } from "react";
import { motion } from "framer-motion";
import trainingImg from "../assets/cropdoctor.jpg";

const trainingModules = {
  en: [
    { title: "ЁЯМ╛ Organic Farming Basics", desc: "Learn eco-friendly crop techniques." },
    { title: "ЁЯТз Efficient Water Usage", desc: "Save water while maximizing yield." },
    { title: "ЁЯЪЬ Smart Use of Fertilizers", desc: "Use fertilizers effectively." },
  ],
  hi: [
    { title: "ЁЯМ╛ рдЬреИрд╡рд┐рдХ рдЦреЗрддреА рдХреА рдмреБрдирд┐рдпрд╛рдж", desc: "рдкрд░реНрдпрд╛рд╡рд░рдг-рдЕрдиреБрдХреВрд▓ рдлрд╕рд▓ рддрдХрдиреАрдХреЗрдВ рд╕реАрдЦреЗрдВред" },
    { title: "ЁЯТз рдЬрд▓ рдХрд╛ рдХреБрд╢рд▓ рдЙрдкрдпреЛрдЧ", desc: "рдЙрддреНрдкрд╛рджрдХрддрд╛ рдмрдврд╝рд╛рддреЗ рд╣реБрдП рдкрд╛рдиреА рдмрдЪрд╛рдПрдБред" },
    { title: "ЁЯЪЬ рдЙрд░реНрд╡рд░рдХреЛрдВ рдХрд╛ рд╕реНрдорд╛рд░реНрдЯ рдЙрдкрдпреЛрдЧ", desc: "рдЙрд░реНрд╡рд░рдХреЛрдВ рдХрд╛ рдкреНрд░рднрд╛рд╡реА рдЙрдкрдпреЛрдЧ рд╕реАрдЦреЗрдВред" },
  ],
  mr: [
    { title: "ЁЯМ╛ рд╕реЗрдВрджреНрд░рд┐рдп рд╢реЗрддреАрдЪреА рдореВрд▓рддрддреНрддреНрд╡реЗ", desc: "рдкрд░реНрдпрд╛рд╡рд░рдгрдкреВрд░рдХ рдкрджреНрдзрддреА рд╢рд┐рдХрд╡рд╛." },
    { title: "ЁЯТз рдЬрд▓рд╛рдЪрд╛ рдХрд╛рд░реНрдпрдХреНрд╖рдо рд╡рд╛рдкрд░", desc: "рдкрд╛рдгреА рд╡рд╛рдЪрд╡рддрд╛рдирд╛ рдЙрддреНрдкрд╛рджрди рд╡рд╛рдврд╡рд╛." },
    { title: "ЁЯЪЬ рдЦрддрд╛рдВрдЪрд╛ рд╕реНрдорд╛рд░реНрдЯ рд╡рд╛рдкрд░", desc: "рдЦрддрд╛рдВрдЪрд╛ рдкреНрд░рднрд╛рд╡реА рд╡рд╛рдкрд░ рд╢рд┐рдХрд╛." },
  ],
  as: [
    { title: "ЁЯМ╛ ржЬрз░рж╛ржпрж╝рзБ ржЪрж╛рз░рж┐рз░ ржнрж┐рждрзНрждрж┐", desc: "ржкрз░рж┐рз▒рзЗрж╢-ржмрж╛ржирзНржзрз▒ ржлрж╕рж▓ ржкрзНрз░ржпрзБржХрзНрждрж┐ рж╢рж┐ржХржХред" },
    { title: "ЁЯТз ржкрж╛ржирзАрз░ ржХрж╛рз░рзНржпржХрзНрж╖ржо ржмрзНржпрз▒рж╣рж╛рз░", desc: "ржЙрзОржкрж╛ржжржи ржмрж╛рзЭрж╛ржЗ ржкрж╛ржирзА ржмрж╛ржБржЪрж╛ржХред" },
    { title: "ЁЯЪЬ рж╕рж╛рж░рз░ ржЪржорзБ ржмрзНржпрз▒рж╣рж╛рз░", desc: "рж╕рж╛рз░ржХ ржХрж╛рз░рзНржпржХрзНрж╖ржоржнрж╛рз▒рзЗ ржмрзНржпрз▒рж╣рж╛рз░ ржХрз░ржХред" },
  ],
  bn: [
    { title: "ЁЯМ╛ ржЬрзИржм ржХрзГрж╖рж┐ ржкрзНрж░рж╛ржержорж┐ржХ", desc: "ржкрж░рж┐ржмрзЗрж╢ржмрж╛ржирзНржзржм ржлрж╕рж▓ ржкржжрзНржзрждрж┐ рж╢рж┐ржЦрзБржиред" },
    { title: "ЁЯТз ржкрж╛ржирж┐рж░ ржХрж╛рж░рзНржпржХрж░ ржмрзНржпржмрж╣рж╛рж░", desc: "ржЙрзОржкрж╛ржжржи ржмрж╛ржбрж╝рж┐ржпрж╝рзЗ ржкрж╛ржирж┐ ржмрж╛ржБржЪрж╛ржиред" },
    { title: "ЁЯЪЬ рж╕рж╛рж░рзЗрж░ ржЪрж╛рж▓рж╛ржХ ржмрзНржпржмрж╣рж╛рж░", desc: "рж╕рж╛рж░ ржмрзНржпржмрж╣рж╛рж░ ржХрж╛рж░рзНржпржХрж░ржнрж╛ржмрзЗ ржХрж░рзБржиред" },
  ],
  brx: [
    { title: "ЁЯМ╛ рдЬреМрд▓реМ рдлрд╛рд░реНрдорд┐рди рдерд╛рдЦреМ", desc: "рдЬреМрд▓реМ рдлрд╕рд▓ рдерд╛рдЦреМ рдерд┐рдирд╛ред" },
    { title: "ЁЯТз рдЬрд▓реМ рд╕рд╛рдВрд╡рджреЛ рдмреЗ", desc: "рдЬрд▓реМ рд╕рд╛рдВрд╡рджреЛ рдЧрд┐рджрд┐ рдмреЗ рдлрд╕рд▓ред" },
    { title: "ЁЯЪЬ рд╕рд╛рдВрд░реМ рдерд╛рдЦреМ", desc: "рд╕рд╛рдВрд░реМ рдерд╛рдЦреМ рдмреЗ рд╕рд┐рдерд┐ред" },
  ],
  doi: [
    { title: "ЁЯМ╛ рдСрд░реНрдЧреИрдирд┐рдХ рдЦреЗрддреА рджрд╛ рдЖрдзрд╛рд░", desc: "рдкрд░реАрд╕рд░реА рдлрд╕рд▓ рддрдХрдиреАрдХ рд╕реАрдЦреЛред" },
    { title: "ЁЯТз рдкрд╛рдиреА рджрд╛ рд╣рд┐рдХрдорддреА рдЗрд╕реНрддреЗрдорд╛рд▓", desc: "рдЙрддреНрдкрд╛рджрди рд╡рдбреНрдбрджреЗ рдкрд╛рдиреА рдмрдЪрд╛рдУред" },
    { title: "ЁЯЪЬ рдЦрд╛рдж рджрд╛ рдЪрддреБрд░ рдЗрд╕реНрддреЗрдорд╛рд▓", desc: "рдЦрд╛рдж рджрд╛ рд╣рд┐рдХрдорддреА рдЗрд╕реНрддреЗрдорд╛рд▓ рдХрд░реЛред" },
  ],
  gu: [
    { title: "ЁЯМ╛ ркУрк░рлНркЧрлЗркирк┐ркХ ркЦрлЗркдрлАркирк╛ркВ ркорлВрк│ркнрлВркд", desc: "рккрк░рлНркпрк╛рк╡рк░ркгрккрлНрк░рк┐ркп рккрк╛ркХ ркЯрлЗркХркирлАркХрлНрк╕ рк╢рлАркЦрлЛред" },
    { title: "ЁЯТз рккрк╛ркгрлАркирлЛ ркХрк╛рк░ркЧркд ркЙрккркпрлЛркЧ", desc: "ркЙркдрлНрккрк╛ркжрки рк╡ркзрк╛рк░рлАркирлЗ рккрк╛ркгрлА ркмркЪрк╛рк╡рлЛред" },
    { title: "ЁЯЪЬ ркЦрк╛ркдрк░ркирлЛ рк╕рлНркорк╛рк░рлНркЯ ркЙрккркпрлЛркЧ", desc: "ркЦрк╛ркдрк░ркирлЛ ркЕрк╕рк░ркХрк╛рк░ркХ ркЙрккркпрлЛркЧ ркХрк░рлЛред" },
  ],
  kn: [
    { title: "ЁЯМ╛ р▓╕р▓╛р▓╡р▓пр▓╡ р▓Хр│Гр▓╖р▓┐ р▓ор│Вр▓▓р▓нр│Вр▓д", desc: "р▓кр▓░р▓┐р▓╕р▓░ р▓╕р│Нр▓ир│Зр▓╣р▓┐ р▓мр│Жр▓│р│Ж р▓др▓Вр▓др│Нр▓░р▓Чр▓│р▓ир│Нр▓ир│Б р▓Хр▓▓р▓┐р▓пр▓┐р▓░р▓┐ред" },
    { title: "ЁЯТз р▓ир│Ар▓░р▓┐р▓и р▓кр▓░р▓┐р▓гр▓╛р▓ор▓Хр▓╛р▓░р▓┐ р▓мр▓│р▓Хр│Ж", desc: "р▓Йр▓др│Нр▓кр▓╛р▓жр▓ир│Жр▓пр▓ир│Нр▓ир│Б р▓╣р│Жр▓Ър│Нр▓Ър▓┐р▓╕р▓┐ р▓ир│Ар▓░р▓ир│Нр▓ир│Б р▓Йр▓│р▓┐р▓╕р▓┐ред" },
    { title: "ЁЯЪЬ р▓Чр│Кр▓мр│Нр▓мр▓░р▓ж р▓╕р│Нр▓ор▓╛р▓░р│Нр▓Яр│Н р▓мр▓│р▓Хр│Ж", desc: "р▓Чр│Кр▓мр│Нр▓мр▓░р▓╡р▓ир│Нр▓ир│Б р▓кр▓░р▓┐р▓гр▓╛р▓ор▓Хр▓╛р▓░р▓┐р▓пр▓╛р▓Чр▓┐ р▓мр▓│р▓╕р▓┐ред" },
  ],
  ks: [
    { title: "ЁЯМ╛ ╪з╪▒┌п╪з┘Ж█М┌й ┌й┘Р╪┤█М ╪п█М ╪и┘Ж█М╪з╪п", desc: "┘Е╪з╪н┘И┘Д ╪п┘И╪│╪к ┘Б╪╡┘Д ╪к┌й┘Ж█М┌й ╪│█М┌й┌╛┘И█Ф" },
    { title: "ЁЯТз ┘╛╪з┘Ж█М ╪п█М ╪╣┘В┘Д┘Е┘Ж╪п ╪з╪│╪к╪╣┘Е╪з┘Д", desc: "┘╛█М╪п╪з┘И╪з╪▒ ┘И╪з╪п┌╛ ┌й╪▒ ┘╛╪з┘Ж█М ╪и┌Ж╪з╪д█Ф" },
    { title: "ЁЯЪЬ ┌й┌╛╪з╪п ╪п█М ╪│┘Е╪з╪▒┘╣ ╪з╪│╪к╪╣┘Е╪з┘Д", desc: "┌й┌╛╪з╪п ╪п█М ╪╣┘В┘Д┘Е┘Ж╪п ╪з╪│╪к╪╣┘Е╪з┘Д ┌й╪▒┘И█Ф" },
  ],
  mai: [
    { title: "ЁЯМ╛ рдЬреИрд╡рд┐рдХ рдЦреЗрддреА рдХреЗ рдореВрд▓", desc: "рдкрд░реНрдпрд╛рд╡рд░рдг-рд╕реНрдиреЗрд╣реА рдлрд╕рд▓ рддрдХрдиреАрдХ рд╕реАрдЦреВред" },
    { title: "ЁЯТз рдкрд╛рдиреА рдХреЗ рдХреБрд╢рд▓ рдкреНрд░рдпреЛрдЧ", desc: "рдЙрддреНрдкрд╛рджрди рдмрдврд╝рд╛рдИ рдХреЗ рдкрд╛рдиреА рдмрдЪрд╛рдУред" },
    { title: "ЁЯЪЬ рдЦрд╛рдж рдХреЗ рдЪрддреБрд░ рдкреНрд░рдпреЛрдЧ", desc: "рдЦрд╛рдж рдХреЗ рдкреНрд░рднрд╛рд╡реА рдкреНрд░рдпреЛрдЧ рдХрд░реВред" },
  ],
  ml: [
    { title: "ЁЯМ╛ р┤Ур╡╝р┤Чр┤╛р┤ир┤┐р┤Хр╡Н р┤Хр╡Гр┤╖р┤┐р┤пр╡Бр┤Яр╡Ж р┤Ер┤Яр┤┐р┤╕р╡Нр┤ер┤╛р┤ир┤В", desc: "р┤кр┤░р┤┐р┤╕р╡Нр┤ер┤┐р┤др┤┐ р┤╕р╡Чр┤╣р╡Гр┤ж р┤╡р┤┐р┤│ р┤Яр╡Жр┤Хр╡НтАМр┤ир┤┐р┤Хр╡Нр┤Хр╡Бр┤Хр╡╛ р┤кр┤ар┤┐р┤Хр╡Нр┤Хр╡Бр┤ХуАВ" },
    { title: "ЁЯТз р┤Ьр┤▓р┤др╡Нр┤др┤┐р┤ир╡Нр┤▒р╡Ж р┤лр┤▓р┤кр╡Нр┤░р┤жр┤ор┤╛р┤п р┤Йр┤кр┤пр╡Лр┤Чр┤В", desc: "р┤Йр╡╜тАМр┤кр┤╛р┤жр┤ир┤В р┤╡р╡╝р┤зр┤┐р┤кр╡Нр┤кр┤┐р┤Ър╡Нр┤Ър╡Н р┤Ьр┤▓р┤В р┤▓р┤╛р┤нр┤┐р┤Хр╡Нр┤Хр╡Бр┤ХуАВ" },
    { title: "ЁЯЪЬ р┤Чр╡Лр┤мр╡╝ р┤Йр┤кр┤пр╡Лр┤Чр┤др╡Нр┤др┤┐р┤ир╡Нр┤▒р╡Ж р┤╕р╡Нр┤ор┤╛р╡╝р┤Яр╡Нр┤Яр╡Н", desc: "р┤Чр╡Лр┤мр╡╝ р┤лр┤▓р┤кр╡Нр┤░р┤жр┤ор┤╛р┤пр┤┐ р┤Йр┤кр┤пр╡Лр┤Чр┤┐р┤Хр╡Нр┤Хр╡Бр┤ХуАВ" },
  ],
  mni: [
    { title: "ЁЯМ╛ ъпСъпгъпФъпТъпеъпЕъпдъпЫ ъпАъпнъпФъпдъпБъпдъпб ъпСъпГъпеъпПъпЕъпе", desc: "ъпСъпгъпФъпТъпеъпЕъпдъпЫ ъпСъпГъпе ъпЗъпжъпЫъпЕъпдъпЫ ъпКъпеъпХъпеъпЕъпдред" },
    { title: "ЁЯТз ъпДъпеъпЕъпд ъпАъпЭъпХъпеъпб ъпСъпМъпиъпЭъпЕъпе", desc: "ъпСъпгъпПъпЕъпе ъпЛъпеъпФъпдъпЕъпе ъпДъпеъпЕъпд ъпБъпеъпХъперед" },
    { title: "ЁЯЪЬ ъпИъпеъпЧ ъпЗъпеъпЭъпЕъпе", desc: "ъпИъпеъпЧ ъпСъпМъпиъпЭъпЕъпе ъпБъпеъпХъперед" },
  ],
  ne: [
    { title: "ЁЯМ╛ рдЬреИрд╡рд┐рдХ рдЦреЗрддреАрдХреЛ рдЖрдзрд╛рд░", desc: "рдкрд░реНрдпрд╛рд╡рд░рдгрдореИрддреНрд░реА рдлрд╕рд▓ рдкреНрд░рд╡рд┐рдзрд┐ рд╕рд┐рдХреНрдиреБрд╣реЛрд╕реНред" },
    { title: "ЁЯТз рдкрд╛рдиреАрдХреЛ рдкреНрд░рднрд╛рд╡рдХрд╛рд░реА рдкреНрд░рдпреЛрдЧ", desc: "рдЙрддреНрдкрд╛рджрди рдмрдврд╛рдПрд░ рдкрд╛рдиреА рдмрдЪрдд рдЧрд░реНрдиреБрд╣реЛрд╕реНред" },
    { title: "ЁЯЪЬ рдорд▓рдХреЛ рдЪрддреБрд░ рдкреНрд░рдпреЛрдЧ", desc: "рдорд▓рдХреЛ рдкреНрд░рднрд╛рд╡рдХрд╛рд░реА рдкреНрд░рдпреЛрдЧ рдЧрд░реНрдиреБрд╣реЛрд╕реНред" },
  ],
  or: [
    { title: "ЁЯМ╛ рмУрм░рнНрмЧрм╛рмирм┐рмХ рмЦрнЗрмдрм┐рм░ рмЖрмзрм╛рм░", desc: "рмкрм░рм┐рммрнЗрм╢-рм╕рмирнНрмзрм╛рми рмлрм╕рм▓ рмкрмжрнНрмзрмдрм┐ рм╢рм┐рмЦрмирнНрмдрнБред" },
    { title: "ЁЯТз рмЬрм│рм░ рмХрм╛рм░рнНрмпрнНрнЯрмХрнБрм╢рм│ рммрнНрнЯрммрм╣рм╛рм░", desc: "рмЙрмдрнНрмкрм╛рмжрми рммрнГрмжрнНрмзрм┐ рмХрм░рм┐ рмЬрм│ рм╕рмЮрнНрмЪрнЯ рмХрм░рмирнНрмдрнБред" },
    { title: "ЁЯЪЬ рмЦрм╛рмжрнНрнЯрм░ рм╕рнНрморм╛рм░рнНрмЯ рммрнНрнЯрммрм╣рм╛рм░", desc: "рмЦрм╛рмжрнНрнЯрм░ рмкрнНрм░рмнрм╛рммрм╢рм╛рм│рнА рммрнНрнЯрммрм╣рм╛рм░ рмХрм░рмирнНрмдрнБред" },
  ],
  pa: [
    { title: "ЁЯМ╛ риЖри░риЧрйИриири┐риХ риЦрйЗридрйА рижрйЗ римрйБриири┐риЖриж", desc: "рикри░ри┐рикрйЗри░риХ ри╕ри╣ри┐рипрйЛриЧрйА рилри╕ри▓ ридриХриирйАриХ ри╕ри┐рй▒риЦрйЛред" },
    { title: "ЁЯТз рикри╛ригрйА рижри╛ ри╕рйБриЪри╛ри░рйВ риЗри╕ридрйЗриори╛ри▓", desc: "риЙридрикри╛рижрии ри╡ризри╛риЙриВрижрйЗ ри╣рйЛриП рикри╛ригрйА римриЪри╛риУред" },
    { title: "ЁЯЪЬ риЦри╛риж рижри╛ ри╕риори╛ри░риЯ риЗри╕ридрйЗриори╛ри▓", desc: "риЦри╛риж рижри╛ рикрйНри░ринри╛ри╡рйА риЗри╕ридрйЗриори╛ри▓ риХри░рйЛред" },
  ],
  sat: [
    { title: "ЁЯМ╛ с▒бс▒дс▒╡ с▒ас▒╖с▒ос▒Ыс▒д с▒ис▒ос▒▒с▒Яс▒Ь", desc: "с▒пс▒Яс▒ис▒дс▒╡с▒ос▒ес▒Яс▒▒с▒лс▒╖с▒Яс▒╡ с▒пс▒Яс▒а с▒Ыс▒Яс▒ас▒▒с▒дс▒а с▒ес▒дс▒ас▒жс▒Ъред" },
    { title: "ЁЯТз с▒пс▒Яс▒▒с▒дс▒и с▒ас▒Яс▒ис▒нс▒Яс▒ас▒ес▒Яс▒в с▒╡с▒ос▒нс▒Яс▒и", desc: "с▒│с▒Ыс▒пс▒Яс▒лс▒▒ с▒╡с▒Яс▒░с▒Яс▒н с▒пс▒Яс▒▒с▒д с▒ес▒Яс▒╡с▒Яс▒╣ред" },
    { title: "ЁЯЪЬ с▒ас▒╖с▒Яс▒л с▒ес▒вс▒Яс▒ис▒Ы с▒╡с▒ос▒нс▒Яс▒и", desc: "с▒ас▒╖с▒Яс▒л с▒ас▒Яс▒ис▒нс▒Яс▒ас▒ес▒Яс▒в с▒╡с▒ос▒нс▒Яс▒и с▒ас▒Ъс▒▓с▒Яред" },
  ],
  sd: [
    { title: "ЁЯМ╛ ╪з╪▒┌п┘К┘Ж┌к ┌к╪▒╪│┘К╪б┘О ╪м┘И ╪и┘Ж┘К╪з╪п", desc: "┘Е╪з╪н┘И┘Д ╪п┘И╪│╪к ┘Б╪╡┘Д ╪╖╪▒┘К┘В╪з ╪│┌й┘К┘И█Ф" },
    { title: "ЁЯТз ┘╛╪з┌╗┘К╪б┘О ╪м┘И ┘Е┘И╪л╪▒ ╪з╪│╪к╪╣┘Е╪з┘Д", desc: "┘╛┘К╪п╪з┘И╪з╪▒ ┘И┌М╪з╪ж┘К ┘╛╪з┌╗┘К ╪и┌Ж╪з┘К┘И█Ф" },
    { title: "ЁЯЪЬ ┌й┘╛┌Щ┘К╪б┘О ╪м┘И ┌Ж╪з┘Д╪з┌к ╪з╪│╪к╪╣┘Е╪з┘Д", desc: "┌й┘╛┌Щ┘К╪б┘О ╪м┘И ┘Е┘И╪л╪▒ ╪з╪│╪к╪╣┘Е╪з┘Д ┌к╪▒┘К┘И█Ф" },
  ],
  si: [
    { title: "ЁЯМ╛ р╢вр╖Ыр╖А р╢Ьр╖Ьр╖Ар╖Тр╢нр╖Рр╢▒ р╢Жр╢░р╖Пр╢╗", desc: "р╢┤р╢╗р╖Тр╖Гр╢╗ р╖Др╖Тр╢нр╢Ър╖Пр╢╕р╖У р╢╢р╢▒р╖Кр╢пр╖КтАНр╢╗ р╢нр╖Пр╢Ър╖Кр╖Вр╢лр╢║ р╢Йр╢Ьр╖Щр╢▒ р╢Ьр╢▒р╖Кр╢▒уАВ" },
    { title: "ЁЯТз р╢вр╢╜р╢║р╖Ъ р╢Ър╖Пр╢╗р╖Кр╢║р╢Ър╖Кр╖Вр╢╕ р╢╖р╖Пр╖Ар╖Тр╢нр╢║", desc: "р╢Лр╢┤р╢║р╖Эр╢Ьр╖Ур╢нр╖Пр╖Ар╢║ р╖Ар╖Рр╢йр╖Т р╢Ър╢╗ р╢вр╢╜р╢║ р╢Йр╢нр╖Тр╢╗р╖Т р╢Ър╢╗р╢▒р╖Кр╢▒уАВ" },
    { title: "ЁЯЪЬ р╢┤р╖Ьр╖Др╖Ьр╢╗ р╢╖р╖Пр╖Ар╖Тр╢нр╢║р╖Ъ р╢╗р╖Др╖Гр╖К", desc: "р╢┤р╖Ьр╖Др╖Ьр╢╗ р╢╡р╢╜р╢пр╖Пр╢║р╖У р╢╜р╖Щр╖Г р╢╖р╖Пр╖Ар╖Тр╢нр╖П р╢Ър╢╗р╢▒р╖Кр╢▒уАВ" },
  ],
  ta: [
    { title: "ЁЯМ╛ роТро░рпНроХро╛ройро┐роХрпН ро╡ро┐ро╡роЪро╛роп роЕроЯро┐рокрпНрокроЯрпИ", desc: "роЪрпБро▒рпНро▒рпБроЪрпНроЪрпВро┤ро▓рпН роироЯрпНрокрпБ рокропро┐ро░рпН родрпКро┤ро┐ро▓рпНроирпБроЯрпНрокроЩрпНроХро│рпИ роХро▒рпНроХро╡рпБроорпНуАВ" },
    { title: "ЁЯТз роирпАро░ро┐ройрпН рокропройрпБро│рпНро│ рокропройрпНрокро╛роЯрпБ", desc: "роЙро▒рпНрокродрпНродро┐ропрпИ роЕродро┐роХро░ро┐родрпНродрпБ роирпАро░рпИ роЪрпЗрооро┐роХрпНроХро╡рпБроорпНуАВ" },
    { title: "ЁЯЪЬ роЙро░родрпНродро┐ройрпН ро╕рпНрооро╛ро░рпНроЯрпН рокропройрпНрокро╛роЯрпБ", desc: "роЙро░родрпНродрпИ рокропройрпБро│рпНро│ роорпБро▒рпИропро┐ро▓рпН рокропройрпНрокроЯрпБродрпНродро╡рпБроорпНуАВ" },
  ],
};

function CropDoctor() {
  const [language, setLanguage] = useState("en");
  const [searchTerm, setSearchTerm] = useState("");
  const [completed, setCompleted] = useState({});
  const [soilType, setSoilType] = useState("loamy");
  const [season, setSeason] = useState("kharif");
  const [area, setArea] = useState(1);
  const [prevCrop, setPrevCrop] = useState("");
  const [recommendations, setRecommendations] = useState([]);
  const [error, setError] = useState(null);

  const modules =
    language && trainingModules[language]
      ? trainingModules[language].filter((mod) =>
          mod.title.toLowerCase().includes(searchTerm.toLowerCase())
        )
      : [];

  const toggleComplete = (title) => {
    setCompleted((prev) => ({ ...prev, [title]: !prev[title] }));
  };

  useEffect(() => {
    document.title = "Crop Doctor - AI Farming Tools";
  }, []);

  const ruleBasedRecommend = ({ soilType, season, area, prevCrop }) => {
    const recs = [];
    if (season === "kharif") {
      if (soilType === "loamy" || soilType === "alluvial") {
        recs.push({ name: "Rice (рдзрд╛рди)", reason: "Loamy soil + Kharif season", expectedYield: "4-5 t/ha" });
      } else {
        recs.push({ name: "Maize (рдордХрдИ)", reason: "Tolerant to varied soils", expectedYield: "3-4 t/ha" });
      }
    } else if (season === "rabi") {
      if (soilType === "black") {
        recs.push({ name: "Wheat (рдЧреЗрд╣реВрдБ)", reason: "Black soil holds moisture", expectedYield: "3-4 t/ha" });
      } else {
        recs.push({ name: "Gram (рдЪрдирд╛)", reason: "Low water requirement", expectedYield: "0.6-1 t/ha" });
      }
    } else {
      recs.push({ name: "Pulses (рджрд╛рд▓реЗрдВ)", reason: "Good for crop rotation", expectedYield: "Varies" });
    }

    if (prevCrop && prevCrop.toLowerCase().includes("rice")) {
      recs.push({ name: "Vegetables (рд╕рдмреНрдЬрд╝рд┐рдпрд╛рдБ)", reason: "Rotation after paddy", expectedYield: "Varies" });
    }

    if (area <= 0.5) recs.push({ name: "Vegetables / Herbs", reason: "Small area: high-value crops", expectedYield: "High (per small area)" });

    return recs;
  };

  const handleRecommend = async () => {
    setError(null);
    setRecommendations([]);
    try {
      const payload = { soilType, season, area, prevCrop };
      const res = await fetch("http://localhost:8000/api/recommend", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(payload),
      });

      if (!res.ok) throw new Error("Backend recommend failed, using local rules.");
      const data = await res.json();
      if (data?.recommendedCrops) setRecommendations(data.recommendedCrops);
      else throw new Error("Invalid response from /api/recommend");
    } catch (err) {
      console.warn("Recommend fallback:", err.message);
      const recs = ruleBasedRecommend({ soilType, season, area, prevCrop });
      setRecommendations(recs);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-indigo-200 via-purple-200 to-pink-200 text-gray-800 flex flex-col items-center px-4 py-8 relative overflow-hidden">
      <motion.img
        src={trainingImg}
        alt="Crop Doctor"
        className="mx-auto mb-6 w-1/3 md:w-1/4 lg:w-1/5 rounded-2xl shadow-xl border-2 border-white/50 z-10"
        initial={{ opacity: 0, scale: 0.9 }}
        animate={{ opacity: 1, scale: 1, y: [0, -8, 0] }}
        transition={{ duration: 2, repeat: Infinity, ease: "easeInOut" }}
      />

      <motion.h2
        className="text-3xl md:text-4xl font-extrabold mb-4 text-center bg-clip-text text-transparent bg-gradient-to-r from-purple-600 via-pink-500 to-indigo-600 z-10"
        initial={{ opacity: 0, y: -30 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.8 }}
      >
        ЁЯОУ Crop Doctor - AI Farming Hub
      </motion.h2>

      <div className="mb-6 z-10">
        <label htmlFor="language" className="block text-sm font-medium text-gray-700 mb-2">Select Language:</label>
        <select
          id="language"
          value={language}
          onChange={(e) => setLanguage(e.target.value)}
          className="w-full max-w-xs px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-purple-500"
        >
          {Object.keys(trainingModules).map((lang) => (
            <option key={lang} value={lang}>{lang.toUpperCase()}</option>
          ))}
        </select>
      </div>

      <input
        type="text"
        placeholder="Search training modules..."
        value={searchTerm}
        onChange={(e) => setSearchTerm(e.target.value)}
        className="mb-6 px-4 py-2 rounded-full w-full max-w-md focus:outline-none border-2 border-gray-400 z-10"
      />

      <div className="w-full max-w-5xl grid md:grid-cols-2 gap-6 z-10">
        <div className="bg-white p-5 rounded-xl shadow-lg">
          <h3 className="font-semibold text-lg mb-4">Training Modules</h3>
          {modules.length === 0 && <p className="text-gray-600">No modules found</p>}
          {modules.map((mod, idx) => (
            <motion.div
              key={idx}
              className={`p-4 rounded-md mb-4 flex justify-between items-center cursor-pointer ${
                completed[mod.title] ? "border-2 border-green-500 bg-green-50" : "border border-gray-200"
              }`}
              initial={{ opacity: 0, y: 10 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: idx * 0.05 }}
              onClick={() => toggleComplete(mod.title)}
            >
              <div>
                <h4 className="font-medium">{mod.title}</h4>
                <p className="text-sm text-gray-600">{mod.desc}</p>
              </div>
              {completed[mod.title] && <span className="text-green-600 font-bold">тЬФ</span>}
            </motion.div>
          ))}
        </div>

        <div className="bg-white p-5 rounded-xl shadow-lg">
          <h3 className="font-semibold text-lg mb-4">Crop Recommendation</h3>
          <div className="grid gap-4 sm:grid-cols-2">
            <label className="text-sm">
              Soil Type
              <select
                className="w-full mt-2 p-2 border rounded-lg"
                value={soilType}
                onChange={(e) => setSoilType(e.target.value)}
              >
                <option value="loamy">Loamy</option>
                <option value="alluvial">Alluvial</option>
                <option value="black">Black (Regur)</option>
                <option value="sandy">Sandy</option>
                <option value="laterite">Laterite</option>
              </select>
            </label>
            <label className="text-sm">
              Season
              <select
                className="w-full mt-2 p-2 border rounded-lg"
                value={season}
                onChange={(e) => setSeason(e.target.value)}
              >
                <option value="kharif">Kharif</option>
                <option value="rabi">Rabi</option>
                <option value="zaid">Zaid</option>
              </select>
            </label>
            <label className="text-sm">
              Area (acres)
              <input
                type="number"
                min="0"
                step="0.1"
                value={area}
                onChange={(e) => setArea(parseFloat(e.target.value || 0))}
                className="w-full mt-2 p-2 border rounded-lg"
              />
            </label>
            <label className="text-sm">
              Previous Crop (optional)
              <input
                type="text"
                value={prevCrop}
                onChange={(e) => setPrevCrop(e.target.value)}
                placeholder="e.g. Rice"
                className="w-full mt-2 p-2 border rounded-lg"
              />
            </label>
          </div>
          <div className="mt-4 flex gap-3">
            <button
              onClick={handleRecommend}
              className="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-500 transition"
            >
              Recommend Crops
            </button>
            <button
              onClick={() => { setRecommendations([]); setError(null); }}
              className="bg-gray-200 px-4 py-2 rounded-lg hover:bg-gray-300 transition"
            >
              Clear
            </button>
          </div>
          {recommendations.length === 0 && !error && <p className="text-gray-500 mt-3">No recommendations yet.</p>}
          {recommendations.map((r, i) => (
            <motion.div
              key={i}
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              className="border p-3 rounded-lg mb-3 bg-gray-50"
            >
              <div className="flex justify-between">
                <strong>{r.name}</strong>
                <span className="text-sm text-gray-600">{r.expectedYield || ""}</span>
              </div>
              <p className="text-sm text-gray-700">{r.reason}</p>
            </motion.div>
          ))}
        </div>
      </div>
    </div>
  );
}

export default CropDoctor;